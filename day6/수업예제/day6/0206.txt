<2/10 과목평가>
1. 기본문법, 데이터 타입(형변환), 연산자
2. 접근 제한자
3. 클래스 설계, 생성자
4. 상속과 다형성
5. Object, String 클래스

----------------------------------------------------------------------------
객체지향이란?
Class 구성과 Object 사용법
JVM Memory 구조
Method, Method 호출, 매개변수, 리턴 활용
Constructor, 활용
Access Modifier, 캡슐화 설명, 구현, this, this(), this.멤버변수
-----------------------------------------------------------------------------
pacakge, import,  Access modifier 리뷰-default(package)
Inheritance
Method Overriding, super
Polymorphism, Reference Type Casting
-----------------------------------------------------------------------------
package  상위패키지명.하위패키지명;  ==> 현재파일(프로그램)의 위치

import 상위패키지명.하위패키지명.클래스명;  ==> 현 프로그램에서 사용할 클래스들의 위치 
==> 디폴트 : import java.lang.*;

class 클래스명  extends 부모클래스   ==> 디폴트 : extends Object
{
   자료형 변수명; //변수선언     ----> 멤버변수(전역변수), 필드
  int max;
  A   a;
  
   클래스명(){  //기본 생성자
    //초기화 작업 (멤버변수에 대한 초기화)
    max=100;
    a = new A();
    this(max,a);
  }
  
   클래스명(int max, A a){//오버로딩 생성자
     this.max=max;
     this.a=a;
  }
  
  
   리턴형 메소드명 ( ){ //메소드 정의
       자료형 변수명;   //변수선언  ----> local variable(지역변수)
       변수명 = 데이터; //변수초기화
       메소드명();     //메소드 호출
      if(){}      //조건문
      for(;;){}   //반복문
  }
}
=======================================
class A{
  void hello(){
  
  }
}
----------main-------------
A a = new A();
a.hello();


========================================================

<접근지정(제한)자> : AccessControl   
   public         - 서로 다른 패키지에서도 접근가능
   protected      - 서로 같은 패키지에서 접근가능, 
                                   만약 상속관계를 갖는다면 다른 패키지라도 자식이 부모를 참조!!
   default(생략)   - 서로 같은 패키지에서 접근가능
   private        - 같은 클래스 내에서만 (멤버끼리만) 접근가능

==> 접근지정자 위치
  1. 필드
   [접근지정자4개] 자료형 변수명;
  2. 메소드  
   [접근지정자4개] 리턴자료형 메소드명(  )
   {
     
   }
  3. 클래스
   [접근지정자2개-public/default] class 클래스명{
    
    }
================================================================
<클래스 객체생성>  -----> 멤버(field,method)들에 대한 메모리 할당
1. 동적메모리 할당 
   - 사용안하는 객체에 대해서 가비지컬렉터가 자동 소멸 관리
   - 키워드 : new
   - 사용법 : 참조변수를 통해 참조
            A a = new A();
              a.hello();

2. 정적메모리 할당
   - 자주 사용되는 필드,메소드에 대해 정의
   - 객체들간의 통신에 사용 (공유 데이터를 표현)
   - 키워드 : static
   - 사용법: 클래스명으로 참조
                  클래스명.필드명      클래스명.메소드명();   ==> 클래스변수,클래스메소드
                                            ==> static변수, static메소드
   예)  class B{
         static int su=100;
         public static void goodBye(){}
      }                                             
   ---------------------------------------                  
     <길동 개발자>                 <라임 개발자>
    B.goodBye();               B.goodBye();
    S.o.p(B.su); 100출력
       B.su++;                 
                               S.o.p(B.su); 101출력 

===================================================================
<final>
1. final 자료형 변수명;
   ----> 마지막 변수  : 상수(constant)
   ----> 상수의 식별을 위해 전체 대문자로 표기.

   int max=100;
   max++;  ----> 101변경
   
   final int MAX=100;
   MAX++;  ----> 에러발생!!

2. final 리턴형 메소드명() {}
   ---> 마지막 메소드 : 오버라이딩(메소드 재정의) 할 수 없는 메소드.
   
3. final class 클래스명{}
   ---> 마지막 클래스 : 자식클래스를 갖지 않는 클래스
   ---> 완벽한 클래스(자식통한 기능확장을 원치 않는다)
   ---> 보안
   
===========================================================
<자바빈즈> JavaBeans
- 서로 관련성 있는 속성을 묶어주는 클래스(객체)
- 사용하는 곳에 따라 VO(Value Object) 또는 DTO(Data Transfer Object) 
   라는 이름을 사용하기도 함.
   
규칙)
   1. 속성데이터를 private하게 선언
   2. public 선언된 주고 받는 메소드(get,set)를 정의
   --------------------------------------------
   3. public한 기본생성자,오버로딩 생성자를 정의할 수 있다.
   4. 반드시 속성의 수와 일치하는 get,set이 정의되지 않아도 됨.

참고)
   get으로 시작되는 메소드들 : 게터메소드(getter메소드)
   set으로 시작되는 메소드들 : 세터메소드(setter메소드)

====================================================
class A{void hello(){}}
==> main에서 hello()호출!!
     A a = new A();
       a.hello();
       a.hello();
       a.hello();
       
     new A().hello();  
     new A().hello();  
     new A().hello();  
     

class Parent {}    class Child extends Parent{}
  
  Child c = new Child();
  
  
  Parent p = new Child();  //Parent p =  (Parent) new Child();
  Parent p = c;            //Parent p =  (Parent) c;
  
  Parent p2 = new Parent();
  Child c =  p;    (컴파일 에러!!)
  Child c2 =  p2;  (컴파일 에러!!)
  
  Child c =  (Child)p;    (컴파일 성공!!)  ----> 실행잘됨!!
  Child c2 =  (Child)p2;  (컴파일 성공!!)  ----> runtime에러 발생!!
  
  
  
  double d = 300;     //double d = (double) 300;
  int i = 34.56;  (X)
  int i = (int)34.56;  (O)   i= 34

=============================================================
<instanceof 연산자>
- 객체의 존재여부를 물어보는 연산자이다.
- 특정 객체의 레퍼런스 변수인지를 판별하는 연산자
  (참조변수가 특정클래스의 멤버를 참조할 수 있는지 여부를 알려줌)
형식)
    ==> 참조변수   instanceof   클래스Type
    ==> 결과) boolean
    
Parent p = new Parent();
Child  c = new Child();

    c instanceof Child   ==> true
    p instanceof Parent  ==> true
    
    c instanceof Parent  ==> true
    p instanceof Child   ==> false

=======================================================
compile오류와 runtime오류 구분!!











    
    
    
    
      
  











   
      
   
