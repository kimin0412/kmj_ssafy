<interface> 인터페이스
 형식)
    interface 인터페이스명{
        //필드
        [고정 public static final] int su=100;
        
        //선언된 메소드
        [고정 public abstract] void print();
    }
---> 저장: 인터페이스명.java  ---컴파일 ---> 인터페이스명.class

  - interface의 구성멤버는 필드, 선언된 메소드로만 구성.
  
void print(){

} ---> 정의된 메소드, 구현된 메소드!!

void print(); ---> 선언된 메소드(바디없는, 영역괄호 없는 메소드)
  
  - 서로 다른 제품에 연결할 수 있는 공통 연결 모듈을 의미.
  - 클래스에 다중 상속을 구현할 수 있다.  
----------------------------------------------------------
  - ★ 인터페이스는 어떻게 사용? 클래스에 구현해서 사용!!
                               ----
                                       키워드:  implements    

   class 클래스명     implements    인터페이스명{
         ------  -----------   --------- 
                    주방         구현의 약속               메뉴판
   
   }   
  
===========================================================
<클래스와 인터페이스 간의 상속문법>  
class A{}

class B extends A{//extends뒤에는 상속받고자 하는 클래스 한개만!!
        -------
        //확장클래스
}  
  
---------------------------------
interface A{}  
interface B{}

class C implements A, B{//A와 B인터페이스내의 선언된 메소드들을 C클래스에서 전부 구현!!
        ----------
                  구현의 약속

}  
---------------------------------
interface A{}
class B{}


class C implements A  extends B{
  //에러발생: 클래스와 인터페이스를 동시에 상속할 때는 클래스 먼저, 인터페이스 나중
  //이유: extends Object을 추가하기 때문
} ---> (X) 

class C extends B implements A{

} ---> (O)
----------------------------------------
interface A {void hello();}
interface B {void hi();}

interface C   extends  A,B{
   void good();
}
----------------------------------------
class A{}

interface B    A{

} ---> 말이 안됨!!
============================================================
<추상클래스> abstract class
- 후손 class를 제어할 목적으로 사용.
- 객체화 될 수 없는 클래스
- 구현(정의)된 메소드와 선언된 메소드로 구성.
- 스스로 객체생성 불가(new 사용X), 후손class 객체생성(자식은 부모다!!)해서 사용.

형식)
   abstract class 클래스명{
      //필드선언
   
      public void hello(){}//구현된(정의된)메소드
      abstract void print();//선언된 메소드
            ※주의: 선언된 메소드를 사용하는 경우 반드시 abstract명시!!
   }

class 기본클래스                    class 추상클래스                  interface 인터페이스
{                         {                     {
  //정의(구현)된 메소드만!!       //선언된 메소드                   //선언된 메소드만!!  
  void hello(){}            void hello();          void hello();
                             //정의 메소드                             
                            void goodBye(){}
}                         }                      }



























  