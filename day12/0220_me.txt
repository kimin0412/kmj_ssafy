<Exception> 예외처리
- 프로그램 실행 중에 발생하는 예기치 않은 사건.
  (자바는 프로그램 실행 중 발생할 수 있는 예외를 처리할 수 있는 기법제공.
   발생하는 모든 예외를 객체로 취급, 예외관련 클래스를 제공)

예) 정수를 0으로 나누는 경우
    배열의 첨자가 음수값을 가지는 경우
    배열 첨자가 배열의 크기를 벗어나는 경우
    부적절한 형변환이 일어나는 경우
     int su = 3.14; //에러  ---> int자료형에서는 0.14에 대한 표현을 할수 없다.
     int su = (int)3.14;  //su변수에 3이 저장.
     
     double d = 30;          //묵시적인 형변환!! d변수에 30.0 이 저장
     double d = (double)30;  //명시적인 형변환!!
     
     (int)"홍길동"   //에러발생: String과 int자료형은 공통점이 없다
     (B)A          //에러발생: A클래스와 B클래스간의 상속관계가 없다.
     
     (Object)String   ------> Object ob =  (Object)"나길동";
     ----> 부모캐스팅 : 보통생략!!  Object ob = "나길동";
     
     ob.length()   ? (X)-----> 부모참조변수 ob 통해  자식클래스(String)의 메소드(length()) 호출 불가!!
     ob.toString() ? -----> toString()메소드는 어떤 클래스의 메소드 일까요?  String!!
     
     (String)Object
     ----> 자식캐스팅: 반드시 명시    String str = (String)ob;
     str.length() ----> 3 (O)
     
     (Parent)Child데이터    (Child)Parent데이터    
     ===> 상속관계에 있었을 때만 캐스팅이 가능
    
    
    입출력시 인터럽트가 발생하는 경우
    입출력하기 위해 지정한 파일이 존재하지 않거나 파일 이름이 틀린 경우.......


 [기본예외상황처리기]
    
             프로그램
         |        
         | 실행                    JVM : 예외발생시 관련된 예외클래스로 부터 예외 객체생성,        
         |                     프로그램에서 지정된 예외처리루틴에게 넘겨준다.
             예외발생
     
<Exception 클래스 계층구조>

                java.lang.Object
                           |
                java.lang.Throwable
                           |
               ------------------------
              |                        |
            Error                  Exception
          
 Error : 하드디스크 포맷이 망가진경우,  메모리파괴, 스택오버플로우
         (프로그램처리하지 않고 JVM에게 맡겨주는게 일반적임)  
         
==================================================================================

 - 이전의 throws 문은  예외가 발생시 할일에 대해 전가의 뜻을 가짐.
 
     void gildong() throws IOException                void  lime()
     {                                                {
        readLine();                                         gildong();
     }                                                }

    ==> gildong()메소드를 실행하다가 만약 IOException이 발생하면 
              그 상황에 대한 처리를 lime()메소드가 하시오!!  
    
<예외처리 구문 형식>  (try~case문)

형식)

  try{
      예외가 발생할 가능성이 있는 문장;   ===> 대체적으로 메소드 호출 문장에서 예외 발생!!
      1
      2
      3
      4
  }catch(예외타입 변수명){ //catch(변수선언)
           실제 예외가 발생시 처리할 문장;
           5
           6
  }finally{
          예외 발생과 상관없이 반드시 실행할 문장;
  }
  
예외처리 case1) 각각 처리

  try{
    AException이 발생할 가능성 있는 문장1;
    }catch(AException e){
       AException발생시 처리할 문장;
    }
    
  try{  
    BException이 발생할 가능성 있는 문장2;
    }catch(BException e){
       BException발생시 처리할 문장;
    }
    
  try{  
    CException이 발생할 가능성 있는 문장3;
   }catch(CException e){
       CException발생시 처리할 문장;
    }
   
예외처리 case2) 다중catch를 사용  : 일반적으로 많이 사용
 try{
	    AException이 발생할 가능성 있는 문장1;
	    BException이 발생할 가능성 있는 문장2;
	    CException이 발생할 가능성 있는 문장3;
	    
   }catch(AException e){
       AException발생시 처리할 문장;
    }catch(BException e){
       BException발생시 처리할 문장;
    }catch(CException e){
       CException발생시 처리할 문장;
    }
-------------------------------------------------------------------
<예외 종류>
1. 체크(Checked)예외
  - 컴파일 에러발생
  - 명시적으로 발생할 수 있는 예외에 대한 처리를 강요
  - 반드시 try~catch 또는 throws를 사용해야 함.
  예) in.readLine();          -------> unhandled exception IOException 에러발생
     new FileReader("a.txt");-------> unhandled exception FileNotFoundException 에러발생
  
2. 언체크(UnChecked)예외
  - 컴파일 에러가 발생하지 않음
  - 개발자의 실수 또는 사용자의 입력데이터로 인해 예외발생
  - 특징은 RuntimeException(부모)을 상속받는 예외 (자식)클래스!!
  - try~catch 또는 throws를 사용해도 되고
  - if문을 통해 처리해도 됨!!
 예) String []names= {"길동","주원"};  ----> 배열 인덱스 0,1 생성
    System.out.println(names[2]);   ----> 컴파일시에는 에러가 발생하지 않고
                                                                            런타임시 에러발생!!

-------------------------------------------------------------------


※ 다중 catch사용시 주의할 점;
   - 부모 자식 클래스 정의하는 순서에 주의!!
   - 만약 Exception들이 상속관계를 갖는 다면
         자식클래스에 대한 catch문을 먼저 정의를 해야함!!
         
  try{                                         
        1.ParentException 발생가능성 있는 문장;    
        2.ChildException 발생가능성 있는 문장;    
    }catch(ParentException pe){
         System.out.println("야호~!!");
    }catch(ChildException ce){
         System.out.println("안녕~!!");
    }   ==> (X) 두번째 catch문은 절대 실행되지 않음!!(컴파일 에러)
   
   catch에 선언한 클래스                       예외발생클래스
   ------------------------------------------
   ParentException pe = new ParentException();      <== 1번문장 예외 발생시
       ---> 야호~!!
   ParentException pe = new ChildException();       <== 2번문장 예외 발생시
       ---> 야호~!!
 ==========================================================================       
  try{                                         
        1.ParentException 발생가능성 있는 문장;    
        2.ChildException 발생가능성 있는 문장;    
    }catch(ChildException pe){
         System.out.println("야호~!!");
    }catch(ParentException ce){
         System.out.println("안녕~!!");
    }   ==> (O)
   
   catch에 선언한 클래스                       예외발생클래스
   ------------------------------------------
   ParentException pe = new ParentException();      <== 1번문장 예외 발생시
       ---> 야호~!!
   ChildException ce = new ChildException();       <== 2번문장 예외 발생시
       ---> 안녕~!!           
         
         